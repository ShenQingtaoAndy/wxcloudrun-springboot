<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tencent.wxcloudrun.dao.UserMapper">

    <!-- 定义结果映射，将数据库字段映射到 Java 对象属性 -->
    <resultMap id="UserResultMap" type="com.tencent.wxcloudrun.model.User">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="sso" column="sso"/>
        <result property="phone" column="phone"/>
        <result property="email" column="email"/>
        <result property="openid" column="openid"/>
        <result property="roles" column="roles"/>
        <result property="createTime" column="createTime"/>
        <result property="updateTime" column="updateTime"/>
        <result property="status" column="status"/>
    </resultMap>

    <!-- 根据用户 ID 查询用户信息 -->
    <select id="selectUserById" resultMap="UserResultMap">
        SELECT * FROM `user` WHERE id = #{id}
    </select>


    <select id="queryUserByOpenId" resultMap="UserResultMap">
        SELECT * FROM `user` WHERE openid = #{openid}
    </select>

    <!-- 查询所有用户信息 -->
    <select id="selectAllUsers" resultMap="UserResultMap">
        SELECT * FROM `user`
    </select>

    <!-- 插入用户信息 -->
    <insert id="insertUser" parameterType="com.tencent.wxcloudrun.model.User">
        INSERT INTO `user` (id, name, sso, phone, email, openid, roles, createTime, updateTime, status)
        VALUES (uuid(), #{name}, #{sso}, #{phone}, #{email}, #{openid}, #{roles}, #{createTime}, #{updateTime}, #{status})
    </insert>

    <!-- 根据用户 ID 更新用户信息 -->
    <update id="updateUserById" parameterType="com.tencent.wxcloudrun.model.User">
        UPDATE `user`
        SET name = #{name},
            sso = #{sso},
            phone = #{phone},
            email = #{email},
            openid = #{openid},
            roles = #{roles},
            createTime = #{createTime},
            updateTime = #{updateTime},
            status = #{status}
        WHERE id = #{id}
    </update>

    <!-- 根据用户 ID 删除用户信息 -->
    <delete id="deleteUserById" parameterType="java.lang.String">
        DELETE FROM `user` WHERE id = #{id}
    </delete>
</mapper>